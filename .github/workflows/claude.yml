name: Claude Code Support

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  # Claude Code GitHub App handles @claude mentions automatically
  claude-code-action:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude PR Action
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: "60"

  # This workflow provides additional CI support for Claude-generated code
  test-claude-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: radio_calisthenics_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential \
            git \
            libpq-dev \
            libyaml-dev \
            pkg-config \
            imagemagick \
            libmagickwand-dev \
            fonts-liberation

      - name: Set up test database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/radio_calisthenics_test
        run: |
          bundle exec rails db:test:prepare

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/radio_calisthenics_test
        run: |
          bundle exec rspec

      - name: Run RuboCop
        run: |
          bundle exec rubocop --format github

      - name: Security scan
        run: |
          bundle exec brakeman --no-pager

      - name: Comment on PR (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.payload.pull_request.number;
            
            try {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: `❌ **CI検証失敗**
                
                PRの変更でCI検証が失敗しました。以下の項目を確認してください：
                - テスト実行結果
                - RuboCopの静的解析結果  
                - Brakemanのセキュリティチェック結果
                
                @claude 修正が必要な場合は、適切なコード修正を提案してください。`
              });
            } catch (error) {
              console.log('コメント作成に失敗しました:', error.message);
            }

      - name: Comment on success  
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.payload.pull_request.number;
            
            try {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: `✅ **CI検証完了**
                
                すべてのテストと品質チェックが成功しました！
                - ✅ RSpecテスト
                - ✅ RuboCop静的解析
                - ✅ Brakemanセキュリティチェック
                
                Claude Code による変更が正常に検証されました。`
              });
            } catch (error) {
              console.log('コメント作成に失敗しました:', error.message);
            }